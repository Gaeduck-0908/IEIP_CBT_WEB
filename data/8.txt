운영체제 종류
운영체제 : 컴퓨터의 하드웨어를 쉽게 사용할 수 있도록 인터페이스를 제공해주는 소프트웨어 사용자 편의성을 위한 인터페이스인 동시에 자원을 관리하는 관리자.
윈도우 : 마우스 이용한 편리한 인터페이스, 마이크로소프트사만 수정 및 배포 가능, 고객 지원 체계적 (문제 발견 시 수정 시간이 오래 걸리고 보안이 취약하다.)
리눅스 / 유닉스 : 멀티태스크 기능 리눅스는 유닉스의 호환커널, 자유 소프트웨어로 원하는 대로의 실행, 무료/유료로 복제물 재배포 가능, 빠른 업데이트 가능, 체계적 지원 X
맥OS : 유닉스 기반 애플사 제품만 사용 가능, 그래픽 기반 운영체제

응용체제 핵심 기능
메모리 관리	: 프로그램의 실행이 종료될 때까지 메모리를 가용한 상태로 유지 및 관리하는것
프로세스 관리 : 일시 중지 및 재실행, 동기화, 통신, 교착상태 처리, 프로세스 생성 삭제 등
가상화 : 서버의 가동률을 60 ~ 70 이상 올릴 수 있다.
클라우드 : 인터넷 기반에서 구동되는 컴퓨팅 기술
SaaS (Software as a Service) : 인프라와 운영체제뿐만 아니라 사용할 수 있는 소프트웨어까지 갖추어져 웹상의 로그인만으로 다양한 소프트웨어를 사용한 만큼 비용을 지불해 가며 사용할 수 있는 서비스
PaaS (Platform as a Service) : 운영체제가 이미 구성되어 있는 상태에서 사용자는 데이터와 애플리케이션만 직접 관할 수 있는 서비스
IaaS (Infrastructure as a Service) : 웹상에서 구글, 마이크로 소프트, 아마존 등에서 제공하는 환경의 네트워크, 보안, 데이터 저장소, 콘텐츠 딜리버리 서비스를 포함한 다양한 인프라를 임대하여 이용할 수 있는 서비스

DBMS 특징
DBMS : 데이터 관리의 복잡성을 해결하는 동시에 데이터 추가, 변경, 검색, 삭제 및 백업, 복구, 보안 등의 기능을 지원하는 소프트웨어는 무엇인가?
RDBMS : 테이블 간의 관계를 정의하여 데이터를 관리하는 DBMS

RDBMS 활용
ERD : 엔티티 간의 관계를 도식화 한 것
개체 : 엔티티는 사각형으로 나타내며 사물 또는 사건으로 정의되는 것
속성 : 개체가 가지고 있는 요소 또는 성질을 뜻하며 선으로 연결된 동그라미로 표기
관계 : 두 개체 간의 관계를 선을 이용하요 표기
정규화 : 무결성을 확보하고 중복성을 배제하여 정확한 데이터가 들어가도록 하는 과정

DDL 명령어
Create : 테이블 생성
Alter : 필드/속성 변경
Drop : 테이블삭제

DML 명령어
Select : 조건에 맞는 튜플 검색
Insert : 새로운 튜플 삽입
Delete : 조건에 맞는 튜플 삭제
Update : 조건에 맞는 튜플 변경

DCL 명령어
Grant : DB 사용자에게 권한을 부여하는 명령어
Revoke : DB 사용자에게 권한을 취소하는 명령어
Commit : DB 조작이 정상적으로 완료 되었음을 알려주는 명령어
Rollback : DB 조작을 원래 상태로 복구하는 명령어

네트워크 분류
WAN : 국가,대륙과 같이 광범위한 지역을 연결하는 네트워크
LAN : 한 건물 또는 작은 지역을 연결하는 네트워크

네트워크 장치
NIC : 컴퓨터에 장착되어있는 랜카드
LAN 케이블 : NIC 가 변환한 전기적 신호를 다른 컴퓨터로 전송하기 위한 케이블
허브 : 여러개의 LAN 을 하나로 합쳐주는 장치
스위치 : 허브와 동일하게 케이블을 하나로 합쳐주는 장치
라우터 : 서로 다른 네트워크를 연결해주는 장치
리피터 : 신호를 수신하여 신호를 증폭한 후 다음 구간으로 재전송하는 장치

네트워크 프로토콜
프로토콜 : 인터넷 통신 규약
물리 계층 : 실제 장비들을 연결하기 위한 연결 장치 (허브, 리피터)
데이터 링크 계층 : 오류와 흐름을 제어하여 신뢰성 있는 데이터를 전송 (브리지, 스위치)
네트워크 계층 : 다수의 중개 시스템 중에서 가장 최적의 경로를 선택하도록 지원 (라우터)
전송 계층 : 통신장비의 송신/수신을 연결하여 목적지 간에 전송제어와 에러를 관리(TCP/IP, UDP)
세션 계층 : 데이터의 송신/수신을 논리적으로 연결 유지하며 동기화를 담당 (호스트, 일반PC)
표현 계층 : 코드, 문자 등을 번역하여 압축, 해제, 보안 기능을 담당 (호스트, 일반PC)
응용 계층 : 사용자가 직접 사용하는 프로그램 (메일, 웹, 응용프로그램 등)

테스트 기법 종류
휴리스틱 (Heuristic Evaluaion) 평가 : 사용성에 대한 문제를 찾아내기 위한 전문가에 의해 이론과 경험을 근거로 하여 일련의 규칙들을 얼마나 잘 지키고 있는가를 확인하는 평가 방법이다. (결과물 : 평가보고서)
페이퍼 프로토타입 (Paper Prototype) 평가 : 프로토타입의 가장 빠른 방법으로 실제 출시될 제품의 전반적인 컨셉과 흐름을 잘 보여주어 보는 사람들이 더 자유롭게 의견을 개진하면서 발전시킬 수 있는 방법이다. (결과물 : 프로토타입)
선호도 (Prefernece) 평가 : “A가 B보다 더 좋다”, “C가 D보다 더 편리하다”와 같이 제품이나 서비스에 대한 사용자의 선호도에 영향을 미치는 속성들을 파악하여 사용자의 니즈에 대응할 수 있는 평가방법이다. (결과물 : 선호도 평가)
성능 (Performance) 평가 : 사용자가 실제로 제품이나 서비스와 연관된 것을 사용해 보고 태스크(TASK) 별 학습성, 효율성, 기억용이성, 오류, 만족도 등에 대해 평가방법이다. (결과물 : 학습성, 효율성, 오류 등 평가)

테스트 환경 구축
사용자 중심 디자인 (User Centered Design) : 사용자 중심 디자인은 사용자가 원하고 필요로 하는 것에 대해 사용자의 한계 능력과 상황에 맞추어 디자인하는 기술이다.
인터랙션 디자인 (Interaction Design) : 인터랙션이란 입출력 장치를 매개로 디지털 시스템과 사람이 주고 받는 일련의 의사소통 과정으로 사람의 행동과 이에 반응하는 시스템의 절차를 설계하는 것이다.
프로토타입 (Prototype) : 프로토타입은 사용자의 모든 요구사항이 정확하게 반영될 때까지 계속해서 개선되고 보완되는 것으로 중요한 기능이 포함되어 있는 시스템의 초기모델을 의미한다.
와이어프레임 (Wireframe) : 최종 화면에 표시될 컨텐츠에서 색상, 타이포그래픽, 이미지를 생략하여 요약하는 것으로 도식, 청사진, 또는 프로토타입이라 부른다.
시장현황보고서 : 기업이 참여하고 있는 사업 분야의 시장 현황 및 특성을 파악하여 시장 매력 요인을 도출하고 성공가능성을 예측하기 위한 보고서이다.
기술현황보고서 : 리서치를 통해 파악한 사용자 정보(동기, 목표, 습관, 기대, 가정 등)를 프로젝트 멤버들과 사업 분야별로 상표, 디자인, 특허 실용 등 기업이 등록한 지적재산권 및 등록 내용의 변화 추리를 조사한 보고서이다.

사용성 테스트 수행
파일럿 테스트 : 주로 컴퓨터 프로그램 등의 최신 기술을 개발하여, 실제 상황에서 실현하기 전에 소규모로 시험 작동 해보는 것을 의미한
심층 인터뷰 (In Depth Interview) : 일대일 면접을 통해 소비자의 심리를 파악하는 조사법으로 어떤 주제에 대해 응답자의 생각이나 느낌을 자유롭게 이야기함으로써 사용자의 욕구, 태도, 감정 등을 발견할 수 있
포커스 그룹 인터뷰 : 표적시장으로 예상되는 소비자를 일정한 자격 기준에 따라 6~12명 정도 선발하여, 한 장소에 모이게 한 후, 면접자의 진행 아래 조사 목적과 관련된 토론을 함으로써 자료를 수집하는 방법이
맥락적 인터뷰 : 맥락적 인터뷰는 서비스 과정 가운데 특정 상황이나 맥락에서 이루어지며, 인터뷰를 진행하면서 리서치는 특정 행동을 관찰하고 조사하는 방법이다.

ISO/IEC 소프트웨어 품질 특성
기능성(Functionality) : 소프트웨어가 특정 조건에서 사용될 때, 명시된 요구와 내재된 요구를 만족하는 기능을 제공하는 소프트웨어 제품의 능력을 말한다.
신뢰성(Reliability) : 명시된 조건에서 사용될 때, 성능 수준을 유지할 수 있는 소프트웨어 제품의 능력으로 신뢰성의 품질부특성은 성숙성, 결함 허용성, 회복성, 준수성 등이 있다.
사용성(Usability) : 명시된 조건에서 사용될 경우, 사용자에 의해 이해되고 학습되고 사용되고 선호될 수 있는 소프트웨어 제품의 능력을 말한다. 사용성의 품질부특성은 이해성, 학습성, 운용성, 친밀성, 준수성 등이 있다.
효율성(Efficiency) : 명시된 조건에서 사용되는 자원의 양에 따라 요구된 성능을 제공하는 소프트웨어 제품의 능력을 말하며 효율성의 품질부특성은 시간반응성, 자원 효율성, 준수성 등이 있다.
이식성(Portability) : 한 환경에서 다른 환경으로 전이될 수 있는 소프트웨어 제품의 능력을 말한다. 이식성의 품질부특성은 적응성, 설치성, 공존성, 대체성, 준수성 등 이 있다.
유지보수성(Maintainability) : 소프트웨어 제품이 변경되는 능력, 변경에는 환경과 요구사항 및 기능적 명세에 따른 소프트웨어의 수정, 개선, 혹은 개작 등이 포함된다.

UI/UX 설계
UI : 사용자가 하드웨어나 시스템에 연결되는 과정에서 사용자의 편리성과 가동성을 높여 주기 위한 기술
UX : UI와 비슷하지만 사용자들의 특성을 객관적 자료 및 통계를 바탕으로 면밀하게 분석하여 사용자의 불편함을 최소화하기 위해 만들 기술

인터페이스 종류
CLI : 사용자와 시스템이 상호 작용을 하는 방식으로 텍스트 형태로 표현
GUI : 사용자가 컴퓨터의 자원을 사용할 수 있도록 구성요소들이 그래픽 형태로 표현
NUI : 사용자의 몸짓, 말소리로 사용할 수 있는 인터페이스

UI 개발
요구사항분석 : 프로그램을 개발하게 되었는지 목적을 분석하는것
사용성 : 사용자가 업무를 쉽고 편리하게 수행하는 것에 의미를 둔다.
유용성 : 사용자가 업무를 수행하는 데 있어 얼마나 정확하게 수행할 수 있는지를 나타내는 것이다.
정보구조 : 처리 내용이나 메뉴의 구조를 표현함 있어 사이트의 구조를 파악할 수 있도록 하는 것이다.
내비게이션 : 사용자가 직관적으로 자신이 찾고 있는 정보를 쉽게 찾을 수 있도록 설계 한다.
유스케이스 : 사용자가 원하는 목표를 위하여 시스템에서 수행해야 하는 내용을 기술한다.

UI 구현
웹 표준 : 웹에서 사용되는 기술이나 규칙을 의미하며 웹 사이트를 작성할 때 이용하는 HTML, CSS, JavaScript 등에 대한 규정을 의미한다.
웹 접근성 : 어떠한 사용자(장애인, 노인 등), 어떠한 기술 환경에서도 사용자가 전문적인 능력 없이 웹 사이트에서 제공하는 모든 정보에 접근할 수 있도록 보장하는 것을 뜻한다.
웹 호환성 : 서비스 이용자 단말기의 하드웨어 및 소프트웨어 환경이 다른 경우에도 동등한 서비스를 제공하는 것을 의미한다.

UI 개발 기술
서버 : 클라이언트에게 네트워크를 통해 정보나 서비스를 제공하는 컴퓨터 또는 프로그램을 의미한다.
클라이언트 : 네트워크를 통하여 다른 서버 시스템 상의 컴퓨터에 원격 서비스에 접속할 수 있는 응용 프로그램이나 서비스를 클라이언트라고 한다.

UI 테스트
Top-Down(하향식) 테스트 : 최상위 모듈에서 하위 모듈로 테스트하는 기법으로 실사용 환경과 유사한 테스트이다. S/W의 변경으로 영향을 받게 될 다른 세부적인 기능에 초점을 맞춘다.
Bottom-Up(상향식) 테스트 : 최하위 모듈에서 상위 모듈로 테스트하는 기법으로 대형 시스템에서 주로 사용되며, 초기에 병행 작업이 가능하여 테스트가 용이하다.
계획 수립 : 목적, 평가 내용(항목) 분석, 사용 환경, 사용자 등을 분석한다.
테스트 설계 : 진행 절차 작성, 테스트 참가자 결정, 테스트 항목의 평가 방향 결정, 다양한 평가 방법으로 설계한다.
테스트 실행 : 설계된 진행 절차대로 진행한다.
결과 보고서 작성 : 평가에 사용된 데이터를 분류하고 분석하며 결과를 통해 문제점을 분석한 후, 수정에 필요한 의견을 포함하여 보고서를 작성함으로써 피드백을 통해 오류를 수정하도록 한다.

자료구조
자료구조 : 컴퓨터에 데이터를 삽입, 삭제, 수정하게 해주는 논리적인 공간 구조를 의미한다.
단순구조(simple) : 프로그래밍 언어에서 제공하는 기본 데이터 타입 (Int, float, double, char 등)
선형구조(Liner) : 자료들 사이의 선 후 관계가 일대일인 구조 (연결 자료 구조, 순차 자료 구조, 스택, 큐, 덱)
비선형구조(Non-Liner) : 자료들 사이의 선후 관계 계층 또는 그물 형태를 가지는 구조 (트리, 그래프 등)
파일 구조(File)	: 보조 기억 장치에 데이터 값이 실제로 기록되는 자료구조 (순차파일, 색인파일 등)

알고리즘
알고리즘 : 넓은 의미에서 자료 구조와 함께 프로그램을 구성하는 요소, 좁은 의미에서는 어떤 문제에 대한 답을 찾는 해법 이다.
입력 : 외부로부터 입력되는 자료가 0개 이상이어야 함.
출력 : 출력되는 결과가 1개 이상이어야 함.
명확성 : 각 명령어의 의미가 명확해야 함.
유한성 : 정해진 단계를 지나면 종료되어야 함.
유효성 : 모든 명령은 실행이 가능한 연산들이어야 함.

구성요소
변수 : 어떤 값을 주기억 장치에 기억하기 위해서 사용하는 공간
식별자 : 프로그램의 구성 요소를 구별하기 위한 기준, 변수명이 식별자에 속함.
바인딩 : 변수와 변수에 관련된 속성을 연결하는 과정으로, 정적 바인딩과 동적 바인딩으로 구분
정적 바인딩(Static binding) : 프로그램 실행 시간 전에 속성을 연결하는 방식
동적 바인딩(Dynamic binding) : 프로그램 실행시간에 속성을 연결하는 방식
선언 : 변수에 이름, 데이터타입 등의 속성을 부여하는 작업으로, 명시적 선언과 묵시적 선언으로 구분
명시적 선언 : 선언문을 이용하여 변수 이름을 나열하고 속성을 부여하는 방식
묵시적 선언 : 별도의 선언문 없이 디폴트 규칙에 의해 속성이 부여되는 방식
할당 : 변수에 메모리 공간을 바인딩(정적/동적) 하는 작업

데이터 타입의 유형
Boolean 타입 : True or False 조건이 참인지 거짓인지 판단하고자 할 때 사용
문자 타입 : 문자 하나 (예 : 'A')를 저장하고자 할 때 사용
문자열 타입 : 나열된 여러개의 문자를 저장하고자 할 때 사용
Integer 타입 : 정수값을 저장하고자 할 때 사용
float 타입 : 소수점을 포함하는 실수값을 저장하고자 할 때 사용
배열 타입 : 여러 데이터를 하나로 묶어서 저장하고자 할 때 사용

산술 연산자
+ : 양쪽의 값을 더한다.
- : 왼쪽에서 오른쪽 값을 뺀다.
* : 두 개의 값을 곱한다.
/ : 왼쪽값을 오른쪽 값으로 나눈다.
% : 왼쪽값을 오른쪽 값으로 나눈 나머지를 계산한다.

시프트 연산자
<< : 왼쪽값을 오른쪽 값만큼 비트를 왼쪽으로 이동시킨다.
>> : 왼쪽값에 오른쪽 값만큼의 부호 비트를 채우면서 왼쪽으로 이동시킨다.

관계연산자
> : 왼쪽 값이 오른쪽 값보다 크면 true, 아니면 false
< : 왼쪽 값이 오른쪽 값보다 작으면 true, 아니면 false
>= : 왼쪽 값이 오른쪽 값보다 크거나 같으면 true, 아니면 false
<= : 왼쪽 값이 오른쪽 값보다 작거나 같으면 true, 아니면 false
== : 양쪽 값이 같으면 true
!= : 양쪽값이 다르면 true

논리연산자
&& : And 두개의 값이 모두 참이면 true, 아니면 false
|| : or 두개의 값 중 하나가 참이면 true, 아니면 false

비트연산자
& : 비트로 연산후 모두 참이면 true, 아니면 false
| : 비트로 연산후 하나가 참이면 true, 아니면 false
^ : 비트로 연산후 서로 다르면 true, 아니면 false

조건문
if : 조건이 참인지 거짓인지에 따라 경로를 선택
case/switch : 조건에 따라 여러 개의 경로 중 하나를 취하고자 할때 사용한다.

반복문
while : 수식이 거짓이 될 때 까지 해당 문장을 반복해서 실행
for : 시작과 종료 조건을 지정하여 참인 동안 해당 문장을 반복하여 실행
do : 초기값, 최종값, 중간값을 지정하여 반복 실행

사용자 정의 자료형 활용
열거체 : 괄호 안에 연속적인 값이 들어가는 자료형, 특정 값을 넣어주지 않으면 1씩 늘어나기 때문에 상수 배열이라고 부르기도 한다.
구조체 : 괄호 안에 멤버 변수를 사용하는 자료형
공용체 : 구조체와 거의 유사하나 조금 더 범주가 크다.
추상화 : 복잡한 문제의 본질을 이해하기 위해 세부 사항은 배제하고 중요한 부분을 중심으로 간략화 하는 기법
상속 : 상위 수준 그룹의 모든 특성을 하위 수준 그룹이 이어받아 재사용/확장 (단일 상속과 다중 상속이 있다.)
구체화 : 하위 수준 그룹이 상위 수준 그룹의 추상적인 부분을 구체화

프로그래밍 언어의 유형 분류
저급 언어 : 기계가 이해할 수 있도록 만들어진 기계어 (예 : 어셈블리어)
고급 언어 : 개발자가 소스코드를 작할 때 쉽게 이해할 수 있도록 작성된 언어 (예 : C, C++, Java 등 )
명령형 언어/절차형 언어 : 명령어들이 순차적으로 실행되는 프로그래밍 언어 (예 : FORTRAN, COBOL, PASCAL,C)
함수형 언어 : 수학적 수식과 같은 함수들로 프로그래밍을 구성해 호출 (예 : LISP)
논리형 언어 : 규칙에 대한 활성화 조건이 만족되면 연관된 규칙이 실행 (예 : PROLONG)
객체지향 언어 : 객체 간의 메시지 통신을 이용해 프로그래밍 (예 : JAVA, C++)
컴파일 언어 : 고급언어 -> 기계어로 번역, 실행 속도가 높은 장점 (예 : FORTAN, PASCAL, C, C++)
인터프리터 언어 : 고급언어 명령문을 하나씩 번역하고 실행하는 방식의 언어, 프로그램 실행시 계산 
혼합형 언어 : 고급어를 컴파일 하여 중간언어로 변환한 후 인터프리터에 의해 번역을 실행하는 방식의 언어 (예 : JAVA)

절차지향 & 객체지향
절차지향 : 프로그램을 순차적으로 수해시키는 방법
객체지향 : 객체와 객체 간의 통신을 통해 프로그램이 구현됨

라이브러리
라이브러리 : 필요할 때 찾아서 사용할수 있도록 모듈화 되어 제공되는 프로그램
표준 라이브러리 : 프로그래밍 언어가 기본적으로 가지고 있는 라이브러리
외부 라이브러리 : 별도의 파일을 설치해야 함, 누구나 개발하여 설치,공유 가능
모듈 : 개별 파일에서 기능을 제공
패키지 : 여러 개의 모듈을 한 개의 폴더에 묶어서 제공

수행 단계에 따른 테스트의 분류
단위 테스트 : 작은 소프트웨어 단위(컴포넌트 또는 모듈)를 테스트하는 것으로서, 일반적으로 개발자 자신에 의해 행해진다.
통합 테스트 : 모듈 사이의 인터페이스, 통합된 컴포넌트 간의 상호 작용을 테스트하는 것으로, 하나의 프로세스가 완성된 경우 부분적으로 통합 테스트를 수행하는 경우도 있다.
시스템 테스트 : 통합된 단위 시스템의 기능이 컴퓨터 시스템에서 정상적으로 수행되는지를 테스트하는 것으로 성능 및 장애 테스트가 여기에 포함된다.
인수 테스트 : 일반적으로 최종 사용자와 업무에 따른 이해관계자 등이 테스트를 수행함으로써 개발된 제품에 대해 운영 여부를 결정하는 테스트로, 실제 업무 적용 전에 수행한다.

결함관리
결함관리 계획 : 결함관리 계획은 전체 프로세스에서 결함관리에 대한 일정, 인력, 업무 프로세스를 확보하여 계획을수립하는 것을 말한다.
결함 기록 : 테스터는 발견된 결함에 대한 정보를 결함관리 DB에 기록한다.
결함 검토 : 등록된 결함에 있어서 주요 내용을 검토하고, 결함을 수정할 개발자에게 전달한다.
결함 수정 : 개발자는 할당된 결함의 프로그램을 수정한다.
결함 재확인 : 테스터는 개발자가 수정한 내용을 확인하고 다시 테스트를 수행한다.
결함 상태 추적 및 모니터링 활동 : 결함관리 팀장은 결함관리 데이터베이스를 이용하여 게시판 형태의 서비스를 제공한다.
최종 결함 분석 및 보고서 작성 : 발견된 결함에 대한 내용과 이해관계자들의 의견이 반영된 보고서를 작성하고 결함관리를 종료한다.

소스코드 빌드 과정
컴파일 언어(C, C++ 등) : 한번에 기계어로 변환하기 때문에 컴파일(번역) 시간이 오래 걸리지만 번역 후 프로그램 속도가 빠르고, 보안이 우수하다.
Byte Code 언어(Java, C# 등) : 컴파일의 결과물이 실행파일이 아닌 'class'라는 바이트 코드로 파일을 생성하여 가상 실행환경인 JRE, CLI에서 한 줄씩 실행하는 방식이다.
인터프리터 언어(Javascript, Python, Ruby 등) : 한줄씩 기계어로 번역하기 때문에 메모리를 적게 소모되어 컴파일(번역) 시간은 빠르지만 필요할 때 마다 번역을 해야 하기 때문에 프로그램 속도는 떨어진다.

애플리케이션 배포 환경
웹 서버(Web Server) : 사용자의 요청자료(정적인 데이터 : html, 그림, 동영상 등)의 결과값을 빠르고 안정적으로 처리하여 제공한다.
WAS(Web Application Server) : 사용자의 요청자료(동적인 데이터 : 연산, 테이블 검색, 삽입, 삭제 등)의 결과값을 빠르게 안정적으로 처리하여 제공공한다.

애플리케이션 배포 단위
jar(Java Archive) : java 라이브러리, 리소스, property 파일들을 포함한다. 프로그램에서 참조하는 라이브러리, 구현된 비즈니스 서비스를 배포할 때 jar 단위로 패키징하여 배포한다.
war(Web Archive) : 웹 켄테이너에 배포되는 배포 형식으로 Servlet, jar 파일과 WEB-INF 폴더에 있는 web.xml 파일로 구성된다. 웹 켄테이너상에 배포되어 독립적인 UI 및 웹 애플리케이션 서비스를 제공할 수 있다.
ear(Enterprise Archive) : jar와 war을 묶어서 하나의 완성된 웹 애플리케이션 서비스를 제공할 수 있다.
형상관리(Configuration Management) 시스템: 형상관리(configuration management)는 형상항목을 식별하여 그 기능적, 물리적 특성을 문서화하고, 그러한 특성의 변경, 제어, 처리 상태를 기록 및 보고하면서 명시된 요구사항에 부합하는지 확인 및 감독하는 활동을 의미한다.

소스코드 검증 도구
정적 테스트 도구 : 테스트하기 전에 코딩오류, 성능저하, 보안 취약점 등의 결함을 조기에 발견할 수 있도록 지원한다. 이렇게 하여 프로그램 생산성 향상과 품질향상에 필요한 관리 시스템을 구축한다.
동적 테스트 도구 : 테스트 미수행 코드를 확인 및 코드구조가 충분히 테스트 되었는지 확인하여 애플리케이션의 안정성을 높이기 위한 관리 시스템을 구축한다.

