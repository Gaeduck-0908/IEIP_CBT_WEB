소스코드 빌드 과정
컴파일 언어(C, C++ 등) : 한번에 기계어로 변환하기 때문에 컴파일(번역) 시간이 오래 걸리지만 번역 후 프로그램 속도가 빠르고, 보안이 우수하다.
Byte Code 언어(Java, C# 등) : 컴파일의 결과물이 실행파일이 아닌 'class'라는 바이트 코드로 파일을 생성하여 가상 실행환경인 JRE, CLI에서 한 줄씩 실행하는 방식이다.
인터프리터 언어(Javascript, Python, Ruby 등) : 한줄씩 기계어로 번역하기 때문에 메모리를 적게 소모되어 컴파일(번역) 시간은 빠르지만 필요할 때 마다 번역을 해야 하기 때문에 프로그램 속도는 떨어진다.

애플리케이션 배포 환경
웹 서버(Web Server) : 사용자의 요청자료(정적인 데이터 : html, 그림, 동영상 등)의 결과값을 빠르고 안정적으로 처리하여 제공한다.
WAS(Web Application Server) : 사용자의 요청자료(동적인 데이터 : 연산, 테이블 검색, 삽입, 삭제 등)의 결과값을 빠르게 안정적으로 처리하여 제공공한다.

애플리케이션 배포 단위
jar(Java Archive) : java 라이브러리, 리소스, property 파일들을 포함한다. 프로그램에서 참조하는 라이브러리, 구현된 비즈니스 서비스를 배포할 때 jar 단위로 패키징하여 배포한다.
war(Web Archive) : 웹 켄테이너에 배포되는 배포 형식으로 Servlet, jar 파일과 WEB-INF 폴더에 있는 web.xml 파일로 구성된다. 웹 켄테이너상에 배포되어 독립적인 UI 및 웹 애플리케이션 서비스를 제공할 수 있다.
ear(Enterprise Archive) : jar와 war을 묶어서 하나의 완성된 웹 애플리케이션 서비스를 제공할 수 있다.
형상관리(Configuration Management) 시스템: 형상관리(configuration management)는 형상항목을 식별하여 그 기능적, 물리적 특성을 문서화하고, 그러한 특성의 변경, 제어, 처리 상태를 기록 및 보고하면서 명시된 요구사항에 부합하는지 확인 및 감독하는 활동을 의미한다.

소스코드 검증 도구
정적 테스트 도구 : 테스트하기 전에 코딩오류, 성능저하, 보안 취약점 등의 결함을 조기에 발견할 수 있도록 지원한다. 이렇게 하여 프로그램 생산성 향상과 품질향상에 필요한 관리 시스템을 구축한다.
동적 테스트 도구 : 테스트 미수행 코드를 확인 및 코드구조가 충분히 테스트 되었는지 확인하여 애플리케이션의 안정성을 높이기 위한 관리 시스템을 구축한다.

